%{
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
%}

%class JeesonParser
%interface JeesonParserTokens
%package org.jeesonmap

%semantic Object
%token OP_BRK CL_BRK STR NUM COM DD OP_SQR CL_SQR BOOL NULL

%%

start:
   json {
       $$ = $1;
       this.parsedResult = $$;
   }
   ;

json:
   object {
       $$ = $1;
   }
   | array {
       $$ = $1;
   }
   ;

object:
   OP_BRK pair_list CL_BRK {
       $$ = $2; // The result is the map created by pair_list
   }
   | OP_BRK CL_BRK {
       $$ = new HashMap<String, Object>(); // Empty map for empty JSON object
   }
   ;

array:
   OP_SQR value_list CL_SQR {
       $$ = $2; // The result is the list created by value_list
   }
   | OP_SQR CL_SQR {
       $$ = new ArrayList<Object>(); // Empty list for empty JSON array
   }
   ;

value:
   STR {
       $$ = (String) $1; // Ensures the value is treated as a string
   }
   | NUM {
       $$ = Integer.parseInt((String) $1); // Parse the string to an integer
   }
   | array {
       $$ = $1; // Already an Object, no need for casting
   }
   | object {
       $$ = $1; // Already an Object, no need for casting
   }
   | BOOL {
       $$ = Boolean.parseBoolean((String) $1); // Parse the string to a boolean
   }
   | NULL {
       $$ = null; // null value
   }
   ;

value_list:
   value {
       List<Object> list = new ArrayList<>();
       list.add($1);
       $$ = list;
   }
   | value_list COM value {
       ((List<Object>)$1).add($3);
       $$ = $1;
   }
   | value_list COM {
        yyerror("There is an extra comma in the array at line " + lexer.getLine() + ", column " + lexer.getColumn() + "!!! Remove the comma or add another value.");
   }
   ;

key:
   STR {
       $$ = (String) $1; 
   }
   ;

pair:
   key DD value {
       Map<String, Object> pairMap = new HashMap<>();
       pairMap.put((String) $1, $3); // Cast key to String for map
       $$ = pairMap;
   }
   | key value {
        yyerror("There is a missing colon (:) at line " + lexer.getLine() + ", column " + lexer.getColumn() + "!!! Maybe you forgot it while adding a new key/value pair.");
   }
   ;

pair_list:
   pair {
       $$ = $1;
   }
   | pair_list COM pair {
       ((Map<String, Object>)$1).putAll((Map<String, Object>)$3);
       $$ = $1;
   }
   | pair_list COM {
        yyerror("There is an extra comma in the object at line " + lexer.getLine() + ", column " + lexer.getColumn() + "!!! Remove the comma or add another key/value pair.");
   }
   ;
%%

private JeesonLexer lexer;
private Object parsedResult;

public JeesonParser(JeesonLexer lexer) {
    this.lexer = lexer;
}

public void yyerror(String error) {
    throw new RuntimeException("Parsing stopped because of this error: " + error);
}

public Object getParsedResult() {
    return this.parsedResult;
}
