%{
import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
%}
%class JsonParser
%interface ParserTokens
%semantic String
%token OP_BRK CL_BRK STR NUM COM DD OP_SQR CL_SQR BOOL NULL
%%
start:
    json {
        $$ = $1;
        System.out.println("Final JSON: " + $$);
    }
    ;

json:
    object {
        $$ = $1;
        System.out.println("Parsed object: " + $$);
    }
    | array {
        $$ = $1;
        System.out.println("Parsed array: " + $$);
    }
    ;

object:
    OP_BRK pair_list CL_BRK {
        $$ = "{" + $2 + "}";
        System.out.println("Built object: " + $$);
    }
    | OP_BRK CL_BRK {
        $$ = "{}";
    }
    ;

array:
    OP_SQR value_list CL_SQR {
        $$ = "[" + $2 + "]";
        System.out.println("Built array: " + $$);
    }
    | OP_SQR CL_SQR {
        $$ = "[]";
    }
    ;

value:
    STR {
        $$ = $1;
        System.out.println("Value (string): " + $$);
    }
    | NUM {
        $$ = $1;
        System.out.println("Value (number): " + $$);
    }
    | array {
        $$ = $1;
        System.out.println("Value (array): " + $$);
    }
    | object {
        $$ = $1;
        System.out.println("Value (object): " + $$);
    }
    | BOOL {
        $$ = $1;
        System.out.println("Value (boolean): " + $$);
    }
    | NULL {
        $$ = $1;
        System.out.println("Value (null): " + $$);
    }
    ;

value_list:
    value {
        $$ = $1;
        System.out.println("Starting value list: " + $$);
    }
    | value_list COM value {
        $$ = $1 + ", " + $3;
        System.out.println("Growing value list: " + $$);
    }
    ;

key:
    STR {
        $$ = $1;
        System.out.println("Found key: " + $$);
    }
    ;

pair:
    key DD value {
        $$ = $1 + ": " + $3;
        System.out.println("Built pair: " + $$);
    }
    ;

pair_list:
    pair {
        $$ = $1;
        System.out.println("Starting pair list: " + $$);
    }
    | pair_list COM pair {
        $$ = $1 + ", " + $3;
        System.out.println("Growing pair list: " + $$);
    }
    ;
%%
private JsonLexer lexer;

public JsonParser(Reader reader) {
    lexer = new JsonLexer(reader);
}

public void yyerror(String error) {
    System.err.println("Error: " + error);
}

public static void main(String args[]) throws IOException {
    FileInputStream jsonFile = new FileInputStream("src/main/resources/jeeson.json");
    JsonParser parser = new JsonParser(new InputStreamReader(jsonFile, Charset.forName("Cp1252")));

    parser.lexer.nextToken();
    parser.parse();

    System.out.println("Parsing completed.");
}
